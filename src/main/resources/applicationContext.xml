<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" 
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.weixin" />
	
	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->  
    <cache:annotation-driven cache-manager="cacheManager" />

	<!-- Spring中引入其他配置文件 -->
	<!-- <import resource="classpath:config/mybatis.xml" /> -->
	<!-- <import resource="classpath:config/redis-config.properties" /> -->

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>  
              <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:config/jdbc.properties</value>  
              <value>classpath:config/redis-config.properties</value>
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->  
              <!-- <value>file:/opt/demo/config/demo-mq.properties</value>  
              <value>file:/opt/demo/config/demo-remote.properties</value> -->  
            </list>
		</property>
	</bean>

	<!-- 1. 数据源 : DriverManagerDataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:config/mybatis.xml"></property>
		<!-- 自动扫描mapping.xml文件 -->
		<!-- <property name="mapperLocations" value="classpath:com/weixin/dao/*.xml"></property> -->
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer 
		sqlSessionFactory basePackage:指定sql映射文件/接口所在的包（自动扫描） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.weixin.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	
	<!-- jedis cluster config  start -->  
	<!-- <bean name="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig" >  
        <property name="maxWaitMillis" value="-1" />  
        <property name="maxTotal" value="1000" />  
        <property name="minIdle" value="8" />  
        <property name="maxIdle" value="100" />  
	</bean>
  
	<bean id="jedisCluster" class="com.weixin.utils.JedisClusterFactory">  
	    <property name="addressConfig">  
	        <value>classpath:config/redis-config.properties</value>  
	    </property>  
	    <property name="addressKeyPrefix" value="address" />    
	    <property name="timeout" value="300000" />  
	    <property name="maxRedirections" value="6" />  
	    <property name="genericObjectPoolConfig" ref="genericObjectPoolConfig" />  
	</bean> -->
	
	<!-- 集群的另外一种配置 -->
	<!-- <bean id="redisNode1" class="org.springframework.data.redis.connection.RedisNode">  
        <constructor-arg name="host" value="${cluster.node1.address}" />   
        <constructor-arg name="port" value="${cluster.node1.port}" type="int" />  
    </bean>  
	<bean id="redisNode2" class="org.springframework.data.redis.connection.RedisNode">  
		<constructor-arg name="host" value="${cluster.node2.address}" />   
        <constructor-arg name="port" value="${cluster.node2.port}" type="int" />   
	</bean>  
    <bean id="redisNode3" class="org.springframework.data.redis.connection.RedisNode">  
		<constructor-arg name="host" value="${cluster.node3.address}" />   
        <constructor-arg name="port" value="${cluster.node3.port}" type="int" />   
    </bean>
	<bean id="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">  
       <property name="maxRedirects" value="3" />  
       <property name="clusterNodes">  
           <set>  
				<ref bean="redisNode1" />
				<ref bean="redisNode2" />
				<ref bean="redisNode3" />
           </set>  
       </property>  
	</bean> -->
	<!-- jedis cluster config  end -->  
	
	<!-- jedis single config start-->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
        <property name="maxIdle" value="${redis.maxIdle}" /> 
        <property name="maxTotal" value="${redis.maxTotal}" />
      	<property name="blockWhenExhausted" value="true" />
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" /> 
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:use-pool="true"> 
       	<!-- 单机节点 -->	
        <property name="hostName" value="${redis.host}" /> 
        <property name="port" value="${redis.port}"/> 
        <property name="poolConfig" ref="jedisPoolConfig" /> 
        <property name="usePool" value="true"/> 
      	<!-- 集群节点 -->
        <!-- <constructor-arg name="clusterConfig" ref="redisClusterConfig"/>  
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <property name="timeout" value="${redis.timeout}" /> -->
    </bean> 

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">   
        <property name="connectionFactory" ref="jedisConnectionFactory" />   
        <property name="keySerializer">   
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />   
        </property>      
        <property name="valueSerializer">   
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />   
        </property>   
        <property name="hashKeySerializer">     
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>     
        </property>   
        <property name="hashValueSerializer">   
           <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>     
        </property> 
    </bean>
    <!-- jedis single config start-->
    
    <!-- 配置缓存 -->  
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">  
	    <constructor-arg ref="redisTemplate" />  
	</bean>
	
	<bean id="redisHttpSessionConfiguration"
    	class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
    	<property name="maxInactiveIntervalInSeconds" value="600"/>
	</bean>
</beans>  